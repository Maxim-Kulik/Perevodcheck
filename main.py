# main.py
import asyncio
import os
from typing import Dict, List, Set

from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv
from flyerapi import Flyer

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
FLYER_KEY = os.getenv("FLYER_KEY")
TARGET_BOT_URL = os.getenv("TARGET_BOT_URL", "https://t.me/your_bot")
BATCH_SIZE = int(os.getenv("BATCH_SIZE", "5"))

if not BOT_TOKEN or not FLYER_KEY:
    raise RuntimeError("BOT_TOKEN –∏ FLYER_KEY –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã (–∑–∞–¥–∞—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è).")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
flyer = Flyer(FLYER_KEY)

# —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏: user_id -> {stage, known_signatures, batch_signatures}
STATE: Dict[int, Dict] = {}


def _extract_task_url(t: dict) -> str:
    for k in ("url", "link", "tg_link", "button_url"):
        if t.get(k):
            return t[k]
    return "https://t.me/FlyerServiceBot"


def build_tasks_kb(tasks: List[dict], stage: int) -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    for i, t in enumerate(tasks, 1):
        title = t.get("title") or t.get("text") or f"–ó–∞–¥–∞–Ω–∏–µ {i}"
        kb.button(text=f"üîó {title}", url=_extract_task_url(t))
    kb.button(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data=f"verify:{stage}")
    kb.adjust(1)
    return kb


async def fetch_unique_tasks(user_id: int, language_code: str, exclude: Set[str], limit: int) -> List[dict]:
    """–í–µ—Ä–Ω—É—Ç—å –¥–æ `limit` –∑–∞–¥–∞—á, –ø–æ–¥–ø–∏—Å–∏ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ exclude. –ù–µ –ø–∞–¥–∞–µ–º –Ω–∞ –æ—à–∏–±–∫–∞—Ö API."""
    unique: List[dict] = []
    seen = set(exclude)
    for _ in range(5):
        try:
            resp = await flyer.get_tasks(user_id=user_id, language_code=language_code, limit=limit + 5)
            tasks = resp if isinstance(resp, list) else []
        except Exception as e:
            print(f"[flyer.get_tasks] error: {e!r}")
            tasks = []
        for t in tasks:
            sig = t.get("signature")
            if not sig or sig in seen:
                continue
            unique.append(t)
            seen.add(sig)
            if len(unique) >= limit:
                return unique
        await asyncio.sleep(0.2)
    return unique


async def start_flow(message: types.Message):
    user_id = message.from_user.id
    lang = (message.from_user.language_code or "ru")
    STATE[user_id] = {"stage": 1, "known_signatures": set(), "batch_signatures": set()}

    tasks = await fetch_unique_tasks(user_id, lang, set(), BATCH_SIZE)
    if len(tasks) < BATCH_SIZE:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    sigs = {t["signature"] for t in tasks if t.get("signature")}
    STATE[user_id]["batch_signatures"] = sigs
    STATE[user_id]["known_signatures"] = set(sigs)

    text = (
        "<b>–î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É</b>\n\n"
        f"1) –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ {BATCH_SIZE} –∫–∞–Ω–∞–ª–æ–≤ –Ω–∏–∂–µ\n"
        "2) –ù–∞–∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ¬ª\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è –ø–æ–ø—Ä–æ—à—É –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –µ—â—ë –Ω–∞ —Ç–∞–∫—É—é –∂–µ –ø–∞—á–∫—É ‚Äî –∏ –æ—Ç–∫—Ä–æ—é –¥–æ—Å—Ç—É–ø."
    )
    await message.answer(text, reply_markup=build_tasks_kb(tasks, stage=1).as_markup())


@dp.message(CommandStart())
async def on_start(message: types.Message):
    await start_flow(message)


@dp.callback_query(F.data.startswith("verify:"))
async def on_verify(call: types.CallbackQuery):
    user_id = call.from_user.id
    lang = (call.from_user.language_code or "ru")
    st = STATE.get(user_id)

    if not st:
        await call.message.edit_text("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /start")
        await call.answer()
        return

    stage = int(call.data.split(":", 1)[1])
    if st["stage"] != stage:
        await call.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞, –Ω–∞–∂–º–∏ /start", show_alert=True)
        return

    batch = list(st["batch_signatures"])
    if not batch:
        await call.message.edit_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π /start")
        await call.answer()
        return

    ok = 0
    for sig in batch:
        try:
            if await flyer.check_task(user_id=user_id, signature=sig):
                ok += 1
        except Exception as e:
            print(f"[flyer.check_task] error for {sig}: {e!r}")

    if ok < len(batch):
        await call.answer()
        await call.message.edit_text(
            f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ {ok}/{len(batch)}. –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å–µ –∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ¬ª.",
            reply_markup=call.message.reply_markup
        )
        return

    if stage == 1:
        st["stage"] = 2
        tasks2 = await fetch_unique_tasks(user_id, lang, st["known_signatures"], BATCH_SIZE)
        sigs2 = {t["signature"] for t in tasks2 if t.get("signature")}
        if (len(tasks2) < BATCH_SIZE) or (sigs2 & st["known_signatures"]):
            await call.message.edit_text("–í—Ç–æ—Ä–∞—è –ø–∞—á–∫–∞ –∑–∞–¥–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ /start")
            await call.answer()
            return
        st["batch_signatures"] = sigs2
        st["known_signatures"].update(sigs2)
        text = (
            "<b>–û—Ç–ª–∏—á–Ω–æ!</b> –ü–µ—Ä–≤–∞—è –ø–∞—á–∫–∞ –≥–æ—Ç–æ–≤–∞.\n"
            f"–¢–µ–ø–µ—Ä—å –ø–æ–¥–ø–∏—à–∏—Å—å –µ—â—ë –Ω–∞ {BATCH_SIZE} –∫–∞–Ω–∞–ª–æ–≤ –∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ¬ª."
        )
        await call.message.edit_text(text, reply_markup=build_tasks_kb(tasks2, stage=2).as_markup())
    else:
        await call.message.edit_text(
            "<b>–ì–æ—Ç–æ–≤–æ!</b> –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è.\n"
            f"–¢–≤–æ—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞: {TARGET_BOT_URL}"
        )
        STATE.pop(user_id, N_
