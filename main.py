# main.py
import asyncio
import os
import logging
from typing import Dict, List, Set

from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv
from flyerapi import Flyer

logging.basicConfig(level=logging.INFO)
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
FLYER_KEY = os.getenv("FLYER_KEY")
TARGET_BOT_URL = os.getenv("TARGET_BOT_URL", "https://t.me/your_bot")
BATCH_SIZE = int(os.getenv("BATCH_SIZE", "5"))

if not BOT_TOKEN or not FLYER_KEY:
    raise RuntimeError("BOT_TOKEN –∏ FLYER_KEY –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã (–∑–∞–¥–∞—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è).")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
flyer = Flyer(FLYER_KEY)

# –ø—Ä–æ—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏: user_id -> {stage, known_signatures, batch_signatures}
STATE: Dict[int, Dict] = {}


def _extract_task_url(t: dict) -> str:
    for k in ("url", "link", "tg_link", "button_url"):
        if t.get(k):
            return t[k]
    return "https://t.me/FlyerServiceBot"


def build_tasks_kb(tasks: List[dict], stage: int) -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    for i, t in enumerate(tasks, 1):
        title = t.get("title") or t.get("text") or f"–ó–∞–¥–∞–Ω–∏–µ {i}"
        kb.button(text=f"üîó {title}", url=_extract_task_url(t))
    kb.button(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data=f"verify:{stage}")
    kb.adjust(1)
    return kb


async def fetch_unique_tasks(user_id: int, language_code: str, exclude: Set[str], limit: int) -> List[dict]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ `limit` –∑–∞–¥–∞—á, –ø–æ–¥–ø–∏—Å–∏ –∫–æ—Ç–æ—Ä—ã—Ö (signature) –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ exclude.
    –ó–∞—â–∏—â–µ–Ω–æ –æ—Ç —Å–±–æ–µ–≤ Flyer: –Ω–µ –ø–∞–¥–∞–µ–º –Ω–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö, –ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —è–∑—ã–∫–æ–≤.
    """
    unique: List[dict] = []
    seen = set(exclude)

    # –ü–æ—Ä—è–¥–æ–∫ –ø–æ–ø—ã—Ç–æ–∫: —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -> ru -> en -> –±–µ–∑ —è–∑—ã–∫–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
    attempts = []
    if language_code:
        attempts.append(language_code)
    attempts += ["ru", "en", None]

    for lang in attempts:
        for _ in range(3):
            try:
                kwargs = {"user_id": user_id, "limit": limit + 5}
                if lang is not None:
                    kwargs["language_code"] = lang
                resp = await flyer.get_tasks(**kwargs)
                tasks = resp if isinstance(resp, list) else []
            except Exception as e:
                logging.warning(f"[flyer.get_tasks lang={lang}] {e!r}")
                tasks = []

            for t in tasks:
                sig = t.get("signature")
                if not sig or sig in seen:
                    continue
                unique.append(t)
                seen.add(sig)
                if len(unique) >= limit:
                    return unique
            await asyncio.sleep(0.2)

    return unique


async def start_flow(message: types.Message):
    user_id = message.from_user.id
    lang = (message.from_user.language_code or "ru")
    STATE[user_id] = {"stage": 1, "known_signatures": set(), "batch_signatures": set()}

    tasks = await fetch_unique_tasks(user_id, lang, set(), BATCH_SIZE)
    if len(tasks) < BATCH_SIZE:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    sigs = {t.get("signature") for t in tasks if t.get("signature")}
    STATE[user_id]["batch_signatures"] = sigs
    STATE[user_id]["known_signatures"] = set(sigs)

    text = (
        "<b>–î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É</b>\n\n"
        f"1) –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ {BATCH_SIZE} –∫–∞–Ω–∞–ª–æ–≤ –Ω–∏–∂–µ\n"
        "2) –ù–∞–∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ¬ª\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è –ø–æ–ø—Ä–æ—à—É –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –µ—â—ë –Ω–∞ —Ç–∞–∫—É—é –∂–µ –ø–∞—á–∫—É ‚Äî –∏ –æ—Ç–∫—Ä–æ—é –¥–æ—Å—Ç—É–ø."
    )
    await message.answer(text, reply_markup=build_tasks_kb(tasks, stage=1).as_markup())


@dp.message(CommandStart())
async def on_start(message: types.Message):
    await start_flow(message)


async def edit_or_send(call: types.CallbackQuery | types.Message, text: str, markup=None):
    """
    –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º),
    —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å 'Prohibited method for a bot type'.
    """
    if isinstance(call, types.CallbackQuery):
        try:
            await call.answer()
        except Exception:
            pass
        chat_id = call.message.chat.id
    else:
        chat_id = call.chat.id
    await bot.send_message(chat_id, text, reply_markup=markup)


@dp.callback_query(F.data.startswith("verify:"))
async def on_verify(call: types.CallbackQuery):
    user_id = call.from_user.id
    lang = (call.from_user.language_code or "ru")
    st = STATE.get(user_id)

    if not st:
        await edit_or_send(call, "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /start")
        return

    stage = int(call.data.split(":", 1)[1])
    if st["stage"] != stage:
        await call.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞, –Ω–∞–∂–º–∏ /start", show_alert=True)
        return

    batch = list(st["batch_signatures"])
    if not batch:
        await edit_or_send(call, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π /start")
        return

    ok = 0
    for sig in batch:
        try:
            if await flyer.check_task(user_id=user_id, signature=sig):
                ok += 1
        except Exception as e:
            logging.warning(f"[flyer.check_task] {sig}: {e!r}")

    if ok < len(batch):
        await edit_or_send(call, f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ {ok}/{len(batch)}. –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å–µ –∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ¬ª.",
                           call.message.reply_markup)
        return

    if stage == 1:
        st["stage"] = 2
        tasks2 = await fetch_unique_tasks(user_id, lang, st["known_signatures"], BATCH_SIZE)
        sigs2 = {t.get("signature") for t in tasks2 if t.get("signature")}
        # –≥–∞—Ä–∞–Ω—Ç–∏—è, —á—Ç–æ 2-—è –ø–∞—á–∫–∞ –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å 1-–π
        if (len(tasks2) < BATCH_SIZE) or (sigs2 & st["known_signatures"]):
            await edit_or_send(call, "–í—Ç–æ—Ä–∞—è –ø–∞—á–∫–∞ –∑–∞–¥–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ /start")
            return
        st["batch_signatures"] = sigs2
        st["known_signatures"].update(sigs2)
        text = (
            "<b>–û—Ç–ª–∏—á–Ω–æ!</b> –ü–µ—Ä–≤–∞—è –ø–∞—á–∫–∞ –≥–æ—Ç–æ–≤–∞.\n"
            f"–¢–µ–ø–µ—Ä—å –ø–æ–¥–ø–∏—à–∏—Å—å –µ—â—ë –Ω–∞ {BATCH_SIZE} –∫–∞–Ω–∞–ª–æ–≤ –∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ¬ª."
        )
        await edit_or_send(call, text, build_tasks_kb(tasks2, stage=2).as_markup())
    else:
        await edit_or_send(call, "<b>–ì–æ—Ç–æ–≤–æ!</b> –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è.\n" f"–¢–≤–æ—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞: {TARGET_BOT_URL}")
        STATE.pop(user_id, None)


async def main():
    # —É–±—Ä–∞—Ç—å webhook, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª —Å long polling
    await bot.delete_webhook(drop_pending_updates=True)

    # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω ‚Äî –≤ –ª–æ–≥–∞—Ö —É–≤–∏–¥–∏—à—å –∏–º—è –±–æ—Ç–∞
    me = await bot.get_me()
    logging.info(f"OK: logged in as @{me.username} (id={me.id})")

    # –∑–∞–ø—É—Å—Ç–∏—Ç—å long polling
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
